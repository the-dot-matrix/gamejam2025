(local Game (require :src.game))
(local Vec (require :src.vec))
(local border (Vec:new 10 10))
(var (game cmpx screen tv pxpx) (values nil nil nil nil nil))

(fn love.load []
  (let [(w h)   (love.window.getDesktopDimensions)
        display (Vec:new w h)
        render  (Vec:new 480 360)
        fitted  (/ display render)
        scale   (- (math.ceil (math.min fitted.x fitted.y)) 1)
        window  (* render scale)
        play    (Game:new)
        units   (+ play.area (* border 2))
        convert (/ render units)
        ratio   (math.min convert.x convert.y)
        pixels  (* units ratio)]
    (love.window.updateMode window.x window.y {:vsync false})
    (love.graphics.setDefaultFilter :nearest :nearest 0)
    (love.graphics.setFont (love.graphics.newFont 16))
    (set pxpx scale)
    (set tv (love.graphics.newCanvas render.x render.y))
    (set screen (love.graphics.newCanvas pixels.x pixels.y))
    (set cmpx ratio)
    (set game play)))

(fn love.update [dt] (game:update dt))

(fn love.draw []
  (love.graphics.setCanvas screen)
  (love.graphics.clear 0.08 0.08 0.08)
  (love.graphics.push)
  (love.graphics.translate 
    (* cmpx border.x)
    (* cmpx border.y 0.25))
  (game:draw cmpx)
  (love.graphics.pop)
  (love.graphics.setCanvas tv)
  (love.graphics.clear 0.04 0.04 0.04)
  (love.graphics.push)
  (love.graphics.translate 
    (/ (- (tv:getWidth) (screen:getWidth)) 2) 
    (/ (- (tv:getHeight) (screen:getHeight)) 2))
  (love.graphics.draw screen)
  (love.graphics.pop)
  (love.graphics.setCanvas)
  (love.graphics.push)
  (love.graphics.scale pxpx pxpx)
  (love.graphics.draw tv)
  (love.graphics.pop)
  (love.graphics.setColor 0 1 0 1)
  (love.graphics.print (..  
    :fps: (love.timer.getFPS)))
  (love.graphics.setColor 1 1 1 1))

(fn love.keypressed [key] (game:keypressed key))
